<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络流(CCPC2024G)</title>
    <link href="/2024/09/18/%E7%BD%91%E7%BB%9C%E6%B5%81-CCPC2024G/"/>
    <url>/2024/09/18/%E7%BD%91%E7%BB%9C%E6%B5%81-CCPC2024G/</url>
    
    <content type="html"><![CDATA[<h1>题意</h1><p><a href="https://codeforces.com/gym/105336">题目地址</a><br>图片描述<br><img src="/img/CCPC2024G.png" alt="图片描述"></p><h1>思路</h1><ol><li>网络流模型，菜品价格的限制建立菜品点到汇点的边容量为菜品价格；每个人的花费建立每个人点到菜品的边，容量为无限大。</li><li>首先考虑第一个人最大花费，建立源点1，建立源点1到一号人点的边，容量为减去打车钱剩余的钱，跑最大流lim。</li><li>然后考虑其他人的限制，建立源点2，源点2到其他人的点的容量限制要小于lim,再次跑最大流。</li><li>检查每道菜是否流满。</li></ol><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x7fffffff</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NWF</span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3005</span>;<span class="hljs-comment">//点数</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>        <span class="hljs-type">int</span> to,nxt;<br>        ll flow;<br>    &#125;;<br>    vector&lt;node&gt; edge;<br>    vector&lt;<span class="hljs-type">int</span> &gt; head,dep,cur;<br>    <span class="hljs-type">int</span> s,t;<br>    <span class="hljs-built_in">NWF</span>()&#123;<br>        head.<span class="hljs-built_in">assign</span>(N,<span class="hljs-number">-1</span>);<br>        dep.<span class="hljs-built_in">assign</span>(N,<span class="hljs-number">0</span>);<br>        cur.<span class="hljs-built_in">assign</span>(N,<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,ll w)</span></span>&#123;<br>        edge.<span class="hljs-built_in">push_back</span>(&#123;v,head[u],w&#125;);<br>        head[u]=edge.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        edge.<span class="hljs-built_in">push_back</span>(&#123;u,head[v],<span class="hljs-number">0</span>&#125;);<br>        head[v]=edge.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>        queue&lt;<span class="hljs-type">int</span>&gt; q;<br>        dep.<span class="hljs-built_in">assign</span>(dep.<span class="hljs-built_in">size</span>(),<span class="hljs-number">0</span>);<br>        dep[s]=<span class="hljs-number">1</span>;q.<span class="hljs-built_in">push</span>(s);cur[s]=head[s];<br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-type">int</span> u=q.<span class="hljs-built_in">front</span>();q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[u];~i;i=edge[i].nxt)&#123;<br>                <span class="hljs-type">int</span> v=edge[i].to;<br>                <span class="hljs-keyword">if</span>(!dep[v]&amp;&amp;edge[i].flow&gt;<span class="hljs-number">0</span>)&#123;<br>                    cur[v]=head[v];<br>                    dep[v]=dep[u]+<span class="hljs-number">1</span>;<br>                    q.<span class="hljs-built_in">push</span>(v);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dep[t]; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u,ll flow)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(u==t||!flow) <span class="hljs-keyword">return</span> flow;<br>        ll ret=<span class="hljs-number">0</span>,d;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=cur[u];~i;i=edge[i].nxt)&#123;<br>            cur[u]=i;<span class="hljs-type">int</span> v=edge[i].to;<br>            <span class="hljs-keyword">if</span>(dep[v]==dep[u]+<span class="hljs-number">1</span>&amp;&amp;(d=<span class="hljs-built_in">dfs</span>(v,<span class="hljs-built_in">min</span>(flow,edge[i].flow))))&#123;<br>                ret+=d;flow-=d;<br>                edge[i].flow-=d;<br>                edge[i^<span class="hljs-number">1</span>].flow+=d;<br>                <span class="hljs-keyword">if</span>(!flow) <span class="hljs-keyword">return</span> ret;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">dinic</span><span class="hljs-params">(<span class="hljs-type">int</span> s0,<span class="hljs-type">int</span> t0)</span></span>&#123;<br>        s=s0;t=t0;ll ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">bfs</span>()) ret+=<span class="hljs-built_in">dfs</span>(s,inf); <br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;T;</span><br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        <span class="hljs-type">int</span> n,m,x,y;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> w;<br>        cin&gt;&gt;n&gt;&gt;m;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span> &gt; <span class="hljs-title">a</span><span class="hljs-params">(n+<span class="hljs-number">5</span>)</span>,<span class="hljs-title">b</span><span class="hljs-params">(n+<span class="hljs-number">5</span>)</span></span>;<br>        NWF nwf;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i]&gt;&gt;b[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            cin&gt;&gt;x&gt;&gt;y&gt;&gt;w;<br>            <span class="hljs-keyword">if</span>(x==y) b[x]+=w;<br>            <span class="hljs-keyword">else</span>&#123;<br>                nwf.<span class="hljs-built_in">add</span>(n+i,n+m+<span class="hljs-number">1</span>,w);<br>                nwf.<span class="hljs-built_in">add</span>(x,n+i,inf);<br>                nwf.<span class="hljs-built_in">add</span>(y,n+i,inf);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">if</span>(b[i]&gt;a[i])&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        nwf.<span class="hljs-built_in">add</span>(n+m+<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,a[<span class="hljs-number">1</span>]-b[<span class="hljs-number">1</span>]);<br>        <span class="hljs-type">int</span> lim=b[<span class="hljs-number">1</span>]+nwf.<span class="hljs-built_in">dinic</span>(n+m+<span class="hljs-number">2</span>,n+m+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-type">int</span> bd=<span class="hljs-built_in">min</span>(a[i],lim<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">if</span>(b[i]&gt;bd)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            nwf.<span class="hljs-built_in">add</span>(n+m+<span class="hljs-number">3</span>,i,bd-b[i]);<br>        &#125;<br>        nwf.<span class="hljs-built_in">dinic</span>(n+m+<span class="hljs-number">3</span>,n+m+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n+<span class="hljs-number">1</span>;i&lt;=n+m;++i)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=nwf.head[i];~j;j=nwf.edge[j].nxt)<br>                <span class="hljs-keyword">if</span>(nwf.edge[j].to==n+m+<span class="hljs-number">1</span>&amp;&amp;nwf.edge[j].flow!=<span class="hljs-number">0</span>)&#123;<br>                    cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>网络流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda</title>
    <link href="/2024/03/23/lambda/"/>
    <url>/2024/03/23/lambda/</url>
    
    <content type="html"><![CDATA[<h1>c++ 中的lambda表达式</h1><h2 id="完整的lambda表达式：">完整的lambda表达式：</h2><p><strong>[captures]&lt;tparams&gt;(params) lambda-specifiers -&gt; return-type {body}</strong><br><strong>成员解释</strong><br><em>captures捕获列表</em>：以值或引用方式捕获上下文变量，在body中使用<br><em>tparams模板参数列表</em>：c++20引入，让lambda可以像模板函数一样被调用<br><em>params 参数列表</em><br><em>lambda-specifiers lambda说明符</em>: 比较常用的参数就是mutable和exception<br><em>return-tpye 返回值类型</em>：一般可以省略掉，由编译器来推导<br><em>body 函数体</em></p><h2 id="捕获列表">捕获列表</h2><p>[] 什么也不捕获，lambda函数体无法使用任何外部变量<br>[=] 按值的方式捕获所有变量<br>[&amp;] 引用的方式捕获所有变量<br>[=, &amp;a] 除了变量a之外，按值的方式捕获所有局部变量，变量a使用引用的方式来捕获。这里可以按引用捕获多个，例如 [=, &amp;a, &amp;b,&amp;c]。<br>[&amp;, a] 除了变量a之外，按引用的方式捕获所有局部变量，变量a使用值的方式来捕获。这里后面的参数也可以多个，例如 [&amp;, a, b, c]。<br>[a, &amp;b] 以值的方式捕获a，引用的方式捕获b，也可以捕获多个。</p><p>使用按值方式捕获的变量不可在函数体中改变其值，可以参与运算。<br>使用引用方式捕获的变量在函数体中改变其值，则在父作用域中也相应改变。</p><div class="note note-info">            <p>使用按值捕获时，注意编译期确定作用范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">int a=2;<br>auto f = [&amp;]()&#123;<br>    cout&lt;&lt;<span class="hljs-string">a;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">f();</span><br><span class="hljs-string">a</span>+=2;<br>f();<br></code></pre></td></tr></table></figure><p>代码输出为22</p>          </div><h2 id="lambda说明符">lambda说明符</h2><p>常用参数mutable：可以修改按值传入的变量的副本（不是值本身）。使用mutable关键字后对按值传入的变量进行的修改，不会将改变传递到Lambda表达式之外。但在lambda的作用域内部，同一个变量的捕获副本永远是同一个，不会因多次调用而产生多个副本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">int a=2;<br>auto f = [=]()mutable&#123;<br>    a++;<br>    cout&lt;&lt;<span class="hljs-string">a;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">f();</span><br><span class="hljs-string">a</span>+=2;<br>f();<br>cout&lt;&lt;<span class="hljs-string">a;</span><br></code></pre></td></tr></table></figure><p>代码输出为344</p><h1>常用使用场景</h1><h2 id="作为匿名比较函数用于排序">作为匿名比较函数用于排序</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">sort(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.begin</span>(), <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.end</span>(), <span class="hljs-selector-attr">[]</span>(int <span class="hljs-selector-tag">a</span>, int <span class="hljs-selector-tag">b</span>) &#123;return <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-tag">b</span>; &#125;);<br><br>struct node&#123;<br>    int <span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">b</span>;<br>&#125;;<br>sort(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.begin</span>(),<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.end</span>(),<span class="hljs-selector-attr">[]</span>(node x,node y)&#123;return x<span class="hljs-selector-class">.b</span>&lt;y<span class="hljs-selector-class">.b</span>;&#125;);<br></code></pre></td></tr></table></figure><h2 id="实现递归">实现递归</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">auto f=[&amp;](auto&amp;&amp; <span class="hljs-keyword">self</span>, <span class="hljs-type">int</span> a)&#123;<br>    <span class="hljs-keyword">if</span>(!a) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>(<span class="hljs-keyword">self</span>,a<span class="hljs-number">-1</span>)+a;<br>&#125;;<br>cout&lt;&lt;f(f,<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>使用文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Type the String 题解</title>
    <link href="/2023/10/18/Type-the-String-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/10/18/Type-the-String-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1>题意</h1><p><a href="https://ac.nowcoder.com/acm/problem/244822">原题地址</a><br><br>用以下的方式构造出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(1 \le n \le 100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">100</span><span class="mclose">)</span></span></span></span>个字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">S_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">S_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><ol><li>花费<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>l</mi><mi>i</mi><mo>≤</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">l_i(1 \le li \le 100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">100</span><span class="mclose">)</span></span></span></span>的代价构造出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，已知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的长度。</li><li>先花费<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k(1 \le k \le 100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">100</span><span class="mclose">)</span></span></span></span>的代价复制之前已经构造出的一个字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">S_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，然后进行增加或删减字符的操作得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，增加或删减一个字符的代价都为1。</li></ol><p>要求最低代价</p><h1>思路</h1><p>注意到方式二的代价为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>+</mo><msub><mi>l</mi><mi>i</mi></msub><mo>+</mo><msub><mi>l</mi><mi>j</mi></msub><mo>−</mo><mi>L</mi><mi>C</mi><mi>S</mi><mo stretchy="false">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>S</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>∗</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">k+l_i+l_j-LCS(S_i,S_j)*2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.05764em;">CS</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>，而且是无向的，即复制后保留下最长公共子序列，其他字符进行增删。考虑把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>看作点，两两之间建无向边，边权为两者转换的代价。<br><br>那么对于方式一可以考虑建立<strong>超级源点</strong>，它到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的边权为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，那么构造出所有字符串可以看作求这张图的<strong>最小生成树</strong></p><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">rec</span>&#123;<span class="hljs-type">int</span> x,y,z;&#125; edge[<span class="hljs-number">100005</span>];<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(rec a,rec b)&#123;<span class="hljs-keyword">return</span> a.z&lt;b.z;&#125;<br><br><span class="hljs-type">int</span> fa[<span class="hljs-number">100005</span>],tot;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span> <span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> fa[x]==x?x:fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    edge[++tot].x=a;<br>    edge[tot].y=b;<br>    edge[tot].z=c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kru</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">sort</span>(edge+<span class="hljs-number">1</span>,edge+tot+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100000</span>;i++) fa[i]=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-built_in">find</span>(edge[i].x);<br><span class="hljs-type">int</span> y=<span class="hljs-built_in">find</span>(edge[i].y);<br>        <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">continue</span>;<br>fa[x]=y;<br>        ans+=edge[i].z;<br>&#125;<br>cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br>string s[<span class="hljs-number">105</span>];<br><span class="hljs-type">int</span> f[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,x;i&lt;=n;++i)&#123;<br>        cin&gt;&gt;x&gt;&gt;s[i];<br>        <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>,i,x);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(f));<br>        <span class="hljs-type">int</span> si=s[i].<span class="hljs-built_in">size</span>(),sj=s[j].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=si;k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>;l&lt;=sj;l++)&#123;<br>            f[k][l]=<span class="hljs-built_in">max</span>(f[k<span class="hljs-number">-1</span>][l],f[k][l<span class="hljs-number">-1</span>]);<br>            <span class="hljs-keyword">if</span>(s[i][k<span class="hljs-number">-1</span>]==s[j][l<span class="hljs-number">-1</span>]) f[k][l]=<span class="hljs-built_in">max</span>(f[k][l],f[k<span class="hljs-number">-1</span>][l<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">add</span>(i,j,si+sj-f[si][sj]*<span class="hljs-number">2</span>+k);<br>    &#125; <br>    <span class="hljs-built_in">kru</span>();  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>最小生成树</tag>
      
      <tag>LCS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>new!</title>
    <link href="/2023/10/12/new/"/>
    <url>/2023/10/12/new/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="rebuild-my-blog-to-mark-myself"><a href="#rebuild-my-blog-to-mark-myself" class="headerlink" title="rebuild my blog to mark myself!"></a>rebuild my blog to mark myself!</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown</title>
    <link href="/2022/10/08/test/"/>
    <url>/2022/10/08/test/</url>
    
    <content type="html"><![CDATA[<h1>标1</h1><h2 id="标2">标2</h2><h3 id="标3">标3</h3><h4 id="标4">标4</h4><h5 id="标5">标5</h5><p><strong>加粗</strong><br><em>斜体</em><br><s>横线</s></p><ul><li>无序</li><li>无序</li></ul><ol><li>有序</li><li>有序</li></ol><p><code>内嵌代码</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//代码块</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>引用</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/08/hello-world/"/>
    <url>/2022/10/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
