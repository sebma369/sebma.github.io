<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Type the String 题解</title>
    <link href="/2023/10/18/Type-the-String-%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/10/18/Type-the-String-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p><a href="https://ac.nowcoder.com/acm/problem/244822">原题地址</a><br><br>用以下的方式构造出$n(1 \le n \le 100)$个字符串$S_1$到$S_n$</p><ol><li>花费$l_i(1 \le li \le 100)$的代价构造出$S_i $，$l_i$为$S_i$的长度。</li><li>先花费$k(1 \le k \le 100)$的代价复制之前已经构造出的一个字符串$S_j$，然后进行增加或删减字符的操作得到$S_i$，增加或删减一个字符的代价都为1。</li></ol><p>要求最低代价</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>注意到方式二的代价为$k+l_i+l_j-LCS(S_i,S_j)<em>2$，而且是无向的，即复制后保留下最长公共子序列，其他字符进行增删。考虑把$S_i$看作点，两两之间建无向边，边权为两者转换的代价。<br><br>那么对于方式一可以考虑建立<strong>超级源点</strong>，它到$S_i$的边权为$l_i$，那么构造出所有字符串可以看作求这张图的*<em>最小生成树</em></em></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include &lt;bits/stdc++.h&gt;</span><br>using namespace std;<br><br>struct rec&#123;int x,y,z;&#125; edge[100005];<br><br>bool operator&lt;(rec a,rec b)&#123;return a.z&lt;b.z;&#125;<br><br>int fa[100005],tot;<br>int <span class="hljs-built_in">find</span> (int x) &#123;<br>return fa[x]==x?x:fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><br>void <span class="hljs-built_in">add</span>(int a,int b,int c)&#123;<br>    edge[++tot].<span class="hljs-attribute">x</span>=a;<br>    edge[tot].<span class="hljs-attribute">y</span>=b;<br>    edge[tot].<span class="hljs-attribute">z</span>=c;<br>&#125;<br><br>void kru()<br>&#123;<br>int <span class="hljs-attribute">ans</span>=0;<br>sort(edge+1,edge+tot+1);<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=1;i&lt;=100000;i++) fa[i]=i;<br><span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=1;i&lt;=tot;i++)&#123;<br>int <span class="hljs-attribute">x</span>=find(edge[i].x);<br>int <span class="hljs-attribute">y</span>=find(edge[i].y);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">x</span>==y) continue;<br>fa[x]=y;<br>        ans+=edge[i].z;<br>&#125;<br>cout&lt;&lt;ans;<br>    return ;<br>&#125;<br><br>string s[105];<br>int f[105][105];<br><br>int main()<br>&#123;<br>    int n,k;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=1,x;i&lt;=n;++i)&#123;<br>        cin&gt;&gt;x&gt;&gt;s[i];<br>        <span class="hljs-built_in">add</span>(0,i,x);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=1;i&lt;=n;++i)<br>    <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">j</span>=i+1;j&lt;=n;j++)&#123;<br>        memset(f,0,sizeof(f));<br>        int <span class="hljs-attribute">si</span>=s[i].size(),<span class="hljs-attribute">sj</span>=s[j].size();<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">k</span>=1;k&lt;=si;k++)<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">l</span>=1;l&lt;=sj;l++)&#123;<br>            f[k][l]=max(f[k-1][l],f[k][l-1]);<br>            <span class="hljs-keyword">if</span>(s[i][k-1]==s[j][l-1]) f[k][l]=max(f[k][l],f[k-1][l-1]+1);<br>        &#125;<br>        <span class="hljs-built_in">add</span>(i,j,si+sj-f[si][sj]<span class="hljs-number">*2</span>+k);<br>    &#125; <br>    kru();  <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>最小生成树</tag>
      
      <tag>LCS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>new!</title>
    <link href="/2023/10/12/new/"/>
    <url>/2023/10/12/new/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="rebuild-my-blog-to-mark-myself"><a href="#rebuild-my-blog-to-mark-myself" class="headerlink" title="rebuild my blog to mark myself!"></a>rebuild my blog to mark myself!</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown</title>
    <link href="/2022/10/08/test/"/>
    <url>/2022/10/08/test/</url>
    
    <content type="html"><![CDATA[<h1 id="标1"><a href="#标1" class="headerlink" title="标1"></a>标1</h1><h2 id="标2"><a href="#标2" class="headerlink" title="标2"></a>标2</h2><h3 id="标3"><a href="#标3" class="headerlink" title="标3"></a>标3</h3><h4 id="标4"><a href="#标4" class="headerlink" title="标4"></a>标4</h4><h5 id="标5"><a href="#标5" class="headerlink" title="标5"></a>标5</h5><p><strong>加粗</strong><br><em>斜体</em><br><del>横线</del></p><ul><li>无序</li><li>无序</li></ul><ol><li>有序</li><li>有序</li></ol><p><code>内嵌代码</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">代码块<br></code></pre></td></tr></table></figure><blockquote><p>引用</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/08/hello-world/"/>
    <url>/2022/10/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
